<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Frequently Asked Questions">
    <part id="general">

        <faq id="HowToReportABug">
            <question>
                I've found a bug, how do I report it?
            </question>
            <answer>
                <p>
                    The best way is to open a bug report in the
                    <a href="https://sourceforge.net/tracker/?group_id=47038&amp;atid=448266">sourceforge bug
                    tracking database</a>.  Sending a bug report to the mailing list runs the risk that the
                    bug may get lost. Putting it in the bug database guarantees that it won't. Please
                    search the bug database to see if your bug hasn't already been reported before opening
                    a new one.
                </p>
                <p>
                    If you know how to fix the problem then pull requests are gratefully accepted.
                </p>
            </answer>
        </faq>

        <faq id="HowToRequestAFeature">
            <question>
                HtmlUnit doesn't support feature X. How do I request this feature?
            </question>
            <answer>
                <p>
                    The best way is to open a bug report in the
                    <a href="https://sourceforge.net/tracker/?group_id=47038&amp;atid=448266">sourceforge bug
                    tracking database</a>. See the answer on bug reporting for why the database is preferred.
                </p>
                <p>
                    If you're willing to write the feature yourself, you can always send us a pull requests.
                </p>
            </answer>
        </faq>

        <faq id="configurations">
            <question>
                What are the most important configurations?
            </question>
            <answer>
                <p>
            <source><![CDATA[
    webClient.getOptions().setJavaScriptEnabled(...);
    webClient.getOptions().setThrowExceptionOnFailingStatusCode(...);
    webClient.getOptions().setThrowExceptionOnScriptError(...);
    webClient.getOptions().getProxyConfig().set...();
            ]]></source>
                </p>
            </answer>
        </faq>

        <faq id="clickNotWorking">
            <question>
                HtmlElement.click() does not triggering anything (e.g. no Javascript event).
            </question>
            <answer>
                <p>The click() processes the click only if the element is visible. Please check the log output - if the element is not visible there should be a warning in the log
                like "Calling click() ignored because the target element 'xxxx' is not displayed." or "Calling click() ignored because the target element 'xxxx' is disabled."
<br/>
If this is the case then you  can use a more advanced version of the click method to ignore the visibility checks
<source><![CDATA[click(boolean shiftKey, boolean ctrlKey, boolean altKey, boolean triggerMouseEvents, boolean ignoreVisibility, boolean disableProcessLabelAfterBubbling)
e.g.
  anchor.click(false, false, false, true, true, false);
]]></source>
</p>
            </answer>
        </faq>

        <faq id="javaScriptExceptions">
            <question>
                When launching my WebClient, I am ending with an js error. But when running on browser,
                we hit the error but keep on. In HtmlUnit, this is where things come to a halt.
            </question>
            <answer>
                <p>
                Because HtmlUnit was designed as testing tool the initial WebClient setup forces this behavior
                (in contrast to real browsers trying ot eat each and every page/javascript code). You can change this by
            <source><![CDATA[webClient.getOptions().setThrowExceptionOnScriptError(false);]]></source>
                </p>
            </answer>
        </faq>

        <faq id="AJAXDoesNotWork">
            <question>
                Nothing happens when using HtmlUnit with AJAX, although page works correctly in browsers. What's wrong?
            </question>
            <answer>
                <p>
                    The main thread using HtmlUnit may be finishing execution before allowing background threads to run.
                    You have a couple of options:
                    <ol>
                        <li><code>webClient.setAjaxController(new NicelyResynchronizingAjaxController());</code> will tell your WebClient instance to re-synchronize asynchronous XHR.</li>
                        <li><code>webClient.waitForBackgroundJavaScript(10000);</code> or <code>webClient.waitForBackgroundJavaScriptStartingBefore(10000);</code> just after getting the page and before manipulating it.</li>
                        <li>Explicitly wait for a condition that is expected be fulfilled when your JavaScript runs, e.g.
            <source><![CDATA[

        //try 20 times to wait .5 second each for filling the page.
        for (int i = 0; i < 20; i++) {
            if (condition_to_happen_after_js_execution) {
                break;
            }
            synchronized (page) {
                page.wait(500);
            }
        }
            ]]></source>
                        </li>
                    </ol>
                </p>
            </answer>
        </faq>

        <faq id="HowToModifyRequestOrResponse">
            <question>
                How to modify the outgoing request or incoming response?
            </question>
            <answer>
                <p>
                    You can subclass WebConnectionWrapper and override getResponse() as:
            <source><![CDATA[

    try (final WebClient webClient = new WebClient()) {
        webClient.getOptions().setThrowExceptionOnScriptError(false);
        // set more options

        // create a WebConnectionWrapper with an (subclassed) getResponse() impl
        new WebConnectionWrapper(webClient) {

            public WebResponse getResponse(WebRequest request) throws IOException {
                WebResponse response = super.getResponse(request);
                if (request.getUrl().toExternalForm().contains("my_url")) {
                    String content = response.getContentAsString();

                    // intercept and/or change content
                    ....

                    // construct replacement response
                    WebResponseData data = new WebResponseData(content.getBytes(response.getContentCharset()),
                            response.getStatusCode(), response.getStatusMessage(), response.getResponseHeaders());
                    response = new WebResponse(data, request, response.getLoadTime());
                }
                return response;
            }
        };

        // use the client as usual
        HtmlPage page = webClient.getPage(uri);
    }
            ]]></source>
                </p>
            </answer>
        </faq>

        <faq id="HowToParseHtmlString">
            <question>
                How to parse html content given as string?
            </question>
            <answer>
                <p>
                    Because HtmlUnit simulates real browsers you have to do some setup before parsing the string.
                    You need a WebClient and an (arbitrary) url (used as base for relative links if there are any).
                <br/>
                XHtml
            <source><![CDATA[

        final String htmlCode = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\""
                + "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">"
                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
                + "  <head>"
                + "    <title>Title</title>"
                + "  </head>"
                + "  <body>"
                + "    content..."
                + "  </body>"
                + "</html> ";
        try (WebClient webClient = new WebClient(browserVersion)) {
            final XHtmlPage page = webClient.loadXHtmlCodeIntoCurrentWindow(htmlCode);
            // work with the xhtml page
        }
            ]]></source>
                Html
            <source><![CDATA[

        final String htmlCode = "<html>"
                + "  <head>"
                + "    <title>Title</title>"
                + "  </head>"
                + "  <body>"
                + "    content..."
                + "  </body>"
                + "</html> ";
        try (WebClient webClient = new WebClient(browserVersion)) {
            final HtmlPage page = webClient.loadHtmlCodeIntoCurrentWindow(htmlCode);
            // work with the html page
        }
            ]]></source>
                </p>
            </answer>
        </faq>

        <faq id="CookieSupport">
            <question>
                I'm having problems with cookie support.
            </question>
            <answer>
                <p>
                    HtmlUnit relies on <a href="http://hc.apache.org/">HttpClient 4</a> for Cookie handling. 
                    If you have an issue, please post it to the HtmlUnit mailing list.
                </p>
            </answer>
        </faq>

        <faq id="RedirectionDiagnosticMessages">
            <question>
                I get error messages about redirection being disabled but I've turned it on.
            </question>
            <answer>
                <source>
26.02.2003 16:07:05 org.apache.commons.httpclient.HttpMethodBase   processRedirectResponse
INFO: Redirect requested but followRedirects is disabled</source>
                <p>
                    It's an annoyance that I haven't figured out how to fix yet.
                </p>
                <p>
                    For a variety of reasons, I handle the redirection logic inside HtmlUnit rather than letting
                    commons-httpclient handle it for me. It's commons-httpclient that is displaying that message
                    because I have explicitly disabled its redirection support.
                </p>
                <p>
                    I'd like to filter out that warning message but haven't figured out a clean way of doing it.  A
                    number of people have pointed out that it's easy to disable a message if you know which logger
                    is being used.  The problem is that there isn't a way to disable the messages without knowing
                    the logger in use.
                </p>
            </answer>
        </faq>

        <faq id="SilentCssErrorHandler">
            <question>
                There are many errors reported by the DefaultCssErrorHandler inside my log output. Can I ignore/disable these messages?
            </question>
            <answer>
                <p>
                    This is because our CSS parser detects some problem with one of the css resources your page relies on.
                    Usually you will see similar error messages if you open your browser debug output window and enable the css log
                    message.
                </p>
                <p>
                    At least if you are scraping web pages you can ignore this. To suppress the output use the SilentCssErrorHandler
                    or implement your own CSSErrorHandler.
                </p>
            <source><![CDATA[

        try (WebClient webClient = new WebClient(browserVersion)) {
            webClient.setCssErrorHandler(new SilentCssErrorHandler());
            ....
        }
            ]]></source>
            </answer>
        </faq>

        <faq id="Roadmap">
            <question>
                What version will feature X be in?
            </question>
            <answer>
                <p>
                    There is no "roadmap" of releases.  Features will be added as 
                    they are written.
                </p>
                <p>
                    Changes to the product (including new features) are implemented by 
                    volunteers in their spare time.  If feature X is important to you 
                    and nobody seems to be working on it then perhaps you should consider 
                    writing it yourself and <a href="submittingPatches.html">submitting a 
                    pull requests</a>.
                </p>
            </answer>
        </faq>

        <faq id="MemoryLeak">
            <question>
                HtmlUnit appears to be leaking memory; what's the deal?
            </question>
            <answer>
                <p>
                    Make sure (a) that you are using the latest version of HtmlUnit, and
                    (b) that you are calling WebClient.close()
                    (or use <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">try-with-resources</a>)
                    when you are finished with your WebClient instance.
                </p>
            </answer>
        </faq>

        <faq id="CodeCoverage">
            <question>
                When I run the unit tests with HtmlUnit and code coverage enabled I get a MethodTooLargeException.
            </question>
            <answer>
                <p>
                    Background:
                    The CSS parser used by HtmlUnit is implemented based on the JavaCC parser generator.
                    Because of the way JavaCC works, the (generated) parser consists of really huge class
                    file (containing huge methods) nearly at the limits of the JVM class byte code.
                    On the other hand Jacoco instruments the byte code (adds more operations) to keep track of the called methods.
                    This is done with a more or less poor approach - without taking the limits of the JVM into account.
                    As a result the instrumented bytecode exceeds the JVM limits and is no longer loadable.
                </p>
                <p>
                    For your tests try to exclude the CssParser (and maybe HtmlUnit itself also) from Jacoco instrumentation.
                    Usually you like to check the code coverage of your classes and not for HtmlUnit oder the CssParser.
                </p>
            </answer>
        </faq>

    </part>
</faqs>
