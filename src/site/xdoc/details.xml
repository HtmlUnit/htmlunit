<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Details about HtmlUnit</title>
        <author>RBRi</author>
    </properties>

    <body>
        <section name="Request headers">
            <p>
                HtmlUnit mimics the browser as close as possible, of course this includes the sent request headers also.
                But you can change this if needed at two levels; the request level and the client level.<br/>
                To change the request header at the client level use WebClient.addRequestHeader(). You are able to
                add additional headers to every request made by this client or overwrite the default ones.<br/>
                Example: add an addition header to every client request
            </p>
            <source><![CDATA[client.addRequestHeader("from htmlunit", "yes");]]></source>
            <p>
                To change the request header at the client level use WebClient.addRequestHeader().<br/>
                Example: replace the default accept-language header for all request made by this client.
            </p>
            <source><![CDATA[client.addRequestHeader(HttpHeader.ACCEPT_LANGUAGE, "fr");]]></source>
            <p>
                Example: replace the default accept-language header for all request made by this client.
            </p>
            <source><![CDATA[client.addRequestHeader(HttpHeader.ACCEPT_LANGUAGE, fromClient);]]></source>
            <p>
                Example: replace the default accept-language header for all request made by this client.
            </p>
            <source><![CDATA[client.addRequestHeader(HttpHeader.ACCEPT_LANGUAGE, fromClient);]]></source>
            <p>
                It is also possible to add/overwrite a request header for a dedicated request.
                Example:
            </p>
            <source><![CDATA[
WebRequest wr = new WebRequest(URL_FIRST);
wr.setAdditionalHeader("from htmlunit", "yes");
....
client .getPage(wr);
]]></source>
        </section>

        <section name="Animations based on Window.requestAnimationFrame()">
            <p>
                All browsers supporded by HtmlUnit are able to do animations based on the
                <a href='https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame'>Window.requestAnimationFrame() API</a>.
                A typical example for this is <a href='https://www.chartjs.org/'>Chart.js</a>.
                This kind of animation support is not triggered automatically because HtmlUnit is headless.
                The javascript part of the API is implemented but the user of the HtmlUnit library has to force the triggering of the callback(s).
            </p>
            <p>
                Example:
            </p>
            <source><![CDATA[
try (final WebClient webClient = new WebClient(BrowserVersion.FIREFOX)) {
    HtmlPage page = webClient.getPage(uri);
    webClient.waitForBackgroundJavaScript(1_000);

    // page is loaded and async js done

    // we now processing the animation
    Window window = page.getEnclosingWindow().getScriptableObject();
    int i = 0; // to be able to limit the animation cycles
    do {
        i++;

        // force one animation cycle
        // this invokes all the animation callbacks registered for this
        // window (by calling requestAnimationFrame(Object)) once.
        int pendingFrames = window.animateAnimationsFrames();
    } while (pendingFrames > 0 && i < 200);
}
]]></source>
            <p>
                Based on this you have to full control over the animation, you can skip all, but you are also
                check the current page state after each single animation step.
            </p>
        </section>

        <section name="Attachments">
            <p>
                Normally pages are loaded inline: clicking on
                a link, for example, loads the linked page in the current window. Attached pages are different
                in that they are intended to be loaded outside of this flow: clicking on a link prompts the
                user to either save the linked page, or open it outside of the current window, but does not
                load the page in the current window.
            </p>
            <p>
                HtmlUnit complies with the semantics described above when an <tt>AttachmentHandler</tt> has
                been registered with the com.gargoylesoftware.htmlunit.WebClient via
                com.gargoylesoftware.htmlunit.WebClient#setAttachmentHandler(AttachmentHandler). When
                no attachment handler has been registered with the <tt>WebClient</tt>, the semantics described
                above to not apply, and attachments are loaded inline. By default, <tt>AttachmentHandler</tt>s
                are not registered with new <tt>WebClient</tt> instances.
            </p>
        </section>

        <section name="Multithreading/Threads Pooling">
            <p>
                HtmlUnit uses an Executor backed by a CachedThreadPool for thread handling. This should work
                fine for common cases. The CachedThreadPool is in use since 2.54.0 to be able to support scenarios using
                many treads e.g. because of many WebSockets.
            </p>
            <p>
                Starting with 2,45.0 you can change this by using WebClient.setExecutor(ExecutorService). It might be
                a good idea to also implement some thread naming to distinguish Threads used by HtmlUnit from the rest.
            </p>
        </section>
    </body>
</document>
