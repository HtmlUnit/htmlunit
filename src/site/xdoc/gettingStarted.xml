<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Getting Started with HtmlUnit</title>
        <author email="mbowler@GargoyleSoftware.com">Mike Bowler</author>
    </properties>

    <body>
        <section name="Content" id="content">
            <macro name="toc">
            </macro>
        </section>

        <section name="Introduction">
            <p>
                The <a href="dependencies.html">dependencies page</a> lists all the jars that you will need
                to have in your classpath.
            </p>
            <p>
                The class org.htmlunit.WebClient is the
                main starting point. This simulates a web browser and will be used to execute
                all of the tests. (see <a href="webclient.html">WebClient - the browser</a>)
            </p>
            <p><strong>Android</strong><br/>
                Using HtmlUnit on Android has some challenges because of the subtle technical distinction
                of java on android. Because of this, we offer a customized distribution to work around these problem.
                Please check out <a href="https://github.com/HtmlUnit/htmlunit-android" target="_blank">htmlunit-android</a> on github.
            </p>
            <p>
                Most unit testing will be done within a framework like <a href="https://junit.org">JUnit</a>
                so all the examples here will assume that we are using that.
            </p>
            <p>
                In the first sample, we create the web client and have it load the homepage from the HtmlUnit website.
                We then verify that this page has the correct title.  Note that getPage() can return different types
                of pages based on the content type of the returned data.  In this case, we are expecting a content
                type of text/html, so we cast the result to an org.htmlunit.html.HtmlPage.
            </p>
            <source><![CDATA[
@Test
public void homePage() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("https://www.htmlunit.org/");
        Assertions.assertEquals("HtmlUnit â€“ Welcome to HtmlUnit", page.getTitleText());

        final String pageAsXml = page.asXml();
        Assertions.assertTrue(pageAsXml.contains("<body class=\"topBarDisabled\">"));

        final String pageAsText = page.asNormalizedText();
        Assertions.assertTrue(pageAsText.contains("Support for the HTTP and HTTPS protocols"));
    }
}]]></source>
        </section>

        <section name="Submitting a form">
            <p>
                Frequently we want to change values in a form and submit the form back to the server. The
                following example shows how you might do this.
            </p>
            <source><![CDATA[
@Test
public void submittingForm() throws Exception {
    try (WebClient webClient = new WebClient()) {

        // Get the first page
        final HtmlPage page = webClient.getPage("http://some_url");

        // Get the form that we are dealing with and within that form,
        // find the submit button and the field that we want to change.
        final HtmlForm form = page.getFormByName("myform");

        final HtmlSubmitInput button = form.getInputByName("submitbutton");
        final HtmlTextInput textField = form.getInputByName("userid");

        // Change the value of the text field
        textField.type("root");

        // Now submit the form by clicking the button and get back the second page.
        final HtmlPage secondPage = button.click();
    }
}]]></source>

            <subsection name="Finding form elements">
                <p>
                    For filling out a form, you first have to find the form elements you like to interact with.
                </p>
            <source><![CDATA[
final HtmlTextInput textField = form.getInputByName("userid");]]></source>
                <p>
                    In addition to all the general ways of finding dom elements (see <a href="#Finding_a_specific_element">below</a>) the HtmlForm object
                    offers some convenient methods to find form elements:
                </p>
                <ul>
                    <li>HtmlForm.getButtonByName(String)</li>
                    <li>HtmlForm.getButtonsByName(String)</li>
                    <li>HtmlForm.getCheckedRadioButton(String)</li>
                    <li>HtmlForm.getInputByName(String)</li>
                    <li>HtmlForm.getInputByValue(String)</li>
                    <li>HtmlForm.getInputsByName(String)</li>
                    <li>HtmlForm.getInputsByValue(String)</li>
                    <li>HtmlForm.getRadioButtonsByName(String)</li>
                    <li>HtmlForm.getSelectByName(String)</li>
                    <li>HtmlForm.getSelectsByName(String)</li>
                    <li>HtmlForm.getTextAreaByName(String)</li>
                    <li>HtmlForm.getTextAreasByName(String)</li>
                    <li>HtmlForm.getElements()</li>
                </ul>
                <p>
                    All these methods are working based on a list of all dom elements associated with this form -
                    this list includes all descendants of the form element AND all other elements associated to
                    this form using the 'form' attribute. In general the method HtmlForm.getElements() builds this
                    list and all other methods using this list as base for more filtering.
                </p>
            </subsection>

            <subsection name="Text input &lt;input type='text'&gt;">
                <p>
                    These form elements represented as instances of class HtmlTextInput.
                </p>
                <source><![CDATA[
final HtmlTextInput textField = form.getInputByName("userid");]]></source>
                <p>
                    To replace the value with some new text you should use the method 
                    <a href='apidocs/org/htmlunit/html/HtmlElement.html#type-java.lang.String-'>HtmlElement#type(String)</a>.
                    This call takes care of setting the focus (if required; including triggering all the focus related events) and
                    then simulating the typing of the provided string (char by char, including the keyboard events).
                </p>
                <source><![CDATA[
textField.type("RBRi");]]></source>
                <p>
                    If all the events not really needed, you can also use the method
                    <a href='apidocs/org/htmlunit/html/HtmlSelectableTextInput.html#setValue-java.lang.String-'>HtmlSelectableTextInput#setValue(String)</a>.
                </p>
            </subsection>

            <subsection name="Text area &lt;textarea&gt;">
                <p>
                    These form elements represented as instances of class HtmlTextArea.
                </p>
                <source><![CDATA[
final HtmlTextArea textArea = form.getTextAreaByName("comment");]]></source>
                <p>
                    The usage of HtmlTextArea is similar to HtmlTextInput (because both derived from HtmlSelectableTextInput).
                    This means you can also use type(String) or even setValue(String) for updating these elements.
                </p>
                <source><![CDATA[
textArea.type("HtmlUnit is a great library...");]]></source>
            </subsection>

            <subsection name="Radio buttons &lt;input type='radio'&gt; and Checkboxes &lt;input type='checkbox'&gt;">
                <p>
                    These form elements represented as instances of class HtmlRadioButtonInput/HtmlCheckBoxInput.
                </p>
                <source><![CDATA[
final HtmlRadioButtonInput countryGermany = form.getInputByName("radio_country_germany");
final HtmlCheckBoxInput programmingLanguage = form.getInputByName("check_language_java");]]></source>
                <p>
                    Usually your form contains many of these elements organized in groups. To check a radio button
                    of a checkbox you have to use 
                    <a href='apidocs/org/htmlunit/html/HtmlRadioButtonInput.html#setChecked-boolean-'>HtmlRadioButtonInput#setChecked(boolean)</a>
                    or
                    <a href='apidocs/org/htmlunit/html/HtmlCheckBoxInput.html#setChecked-boolean-'>HtmlCheckBoxInput#setChecked(boolean)</a>.
                </p>
                <source><![CDATA[
countryGermany.setChecked(true);
programmingLanguage.setChecked(true);]]></source>
                <p>
                    Checking a single radio button will automatically uncheck all other radio buttons in the same group.
                </p>
            </subsection>

            <subsection name="Select &lt;select&gt;">
                <p>
                    These form elements represented as instances of class HtmlSelect. The individual options are represented by
                    instances of class HtmlOption.
                </p>
                <source><![CDATA[
final HtmlSelect currency = form.getInputByName("currency");
                <p>
                    The simplest way to select one of the options is the method
                    <a href='apidocs/org/htmlunit/html/HtmlSelect.html#setSelectedIndex-int-'>HtmlSelect.html#setSelectedIndex(int)</a>.
                </p>
                <source><![CDATA[
currency.setSelectedIndex(true);]]></source>
                <p>
                    To make your code more readable and robust, you have to search for the HtmlOption to select and then use
                    <a href='apidocs/org/htmlunit/html/HtmlSelect.html#setSelectedAttribute-org.htmlunit.html.HtmlOption-boolean-'>HtmlSelect.html#setSelectedAttribute(HtmlOption, boolean)</a>.
                </p>
                <source><![CDATA[
HtmlOption euro = currency.getOptionByValue("Euro");
currency.setSelectedAttribute(euro, true);]]></source>
                <p>
                    For single selection select elements, this call also deselects all other options.
                </p>
            </subsection>
        </section>

        <section name="Finding a specific element">
            <p>
                Once you have a reference to an HtmlPage, you can search for a specific HtmlElement by one of
                'get' methods, or by using XPath or CSS selectors.
            </p>
            <subsection name="Traversing the DOM tree">
                <p>
                    Below is an example of finding a 'div' by an ID, and getting an anchor by name:
                </p>
                <source><![CDATA[
@Test
public void getElements() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("http://some_url");

        final HtmlDivision div = page.getHtmlElementById("some_div_id");
        final HtmlAnchor anchor = page.getAnchorByName("anchor_name");
    }
}]]></source>
                <p>
                    A simple way for finding elements might be to find all elements of a specific type.
                </p>
                <source><![CDATA[
 @Test
 public void getElements() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("http://some_url");

        final DomNodeList<DomElement> inputs = page.getElementsByTagName("input");
        final Iterator<DomElement> nodesIterator = inputs.iterator();
        // now iterate
    }
 }]]></source>
                <p>
                    There is rich set of methods usable to locate page elements e.g.
                </p>
                <ul>
                    <li>HtmlPage.getAnchors(); HtmlPage.getAnchorByHref(String); HtmlPage.getAnchorByName(String); HtmlPage.getAnchorByText(String)</li>
                    <li>HtmlPage.getElementById(String); HtmlPage.getElementsById(String); HtmlPage.getElementsByIdAndOrName(String);</li>
                    <li>HtmlPage.getElementByName(String); HtmlPage.getElementsByName(String)</li>
                    <li>HtmlPage.getFormByName(String); HtmlPage.getForms()</li>
                    <li>HtmlPage.getFrameByName(String); HtmlPage.getFrames()</li>
                </ul>
                <p>
                    You can also start searching from the document element (HtmlPage.getDocumentElement()) and then traverse the dom tree
                </p>
                <ul>
                    <li>HtmlElement.getElementsByAttribute(String, String, String)</li>
                    <li>DomElement.getElementsByTagName(String); DomElement.getElementsByTagNameNS(String, String)</li>
                    <li>DomElement.getChildElements(); DomElement.getChildElementCount()</li>
                    <li>DomElement.getFirstElementChild(); DomElement.getLastElementChild()</li>
                    <li>HtmlElement.getEnclosingElement(String); HtmlElement.getEnclosingForm()</li>
                    <li>DomNode.getChildNodes(); DomNode.getChildren(); DomNode.getDescendants(); DomNode.getDomElementDescendants(); DomNode.getFirstChild(); DomNode.getHtmlElementDescendants()
                        DomNode.getLastChild(); DomNode.getNextElementSibling(); DomNode.getNextSibling(); DomNode.getPreviousElementSibling(); getPreviousSibling()</li>
                </ul>
            </subsection>

            <subsection name="XPath queries">
                <p>
                    XPath is the suggested way for more complex searches, a brief tutorial can be found in
                    <a href="https://www.w3schools.com/xml/xpath_intro.asp">W3Schools</a>
                </p>
                <source><![CDATA[
@Test
public void xpath() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("https://www.htmlunit.org/");

        //get list of all divs
        final List<?> divs = page.getByXPath("//div");

        //get div which has a 'id' attribute of 'banner'
        final HtmlDivision div = (HtmlDivision) page.getByXPath("//div[@id='banner']").get(0);
    }
}]]></source>
            </subsection>

            <subsection name="CSS Selectors">
                <p>
                    You can also use CSS selectors
                </p>
                <source><![CDATA[
@Test
public void cssSelector() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("https://www.htmlunit.org/");

        //get list of all divs
        final DomNodeList<DomNode> divs = page.querySelectorAll("div");
        for (final DomNode div : divs) {
            // ....
        }

        //get div which has the id 'breadcrumbs'
        final DomNode div = page.querySelector("div#breadcrumbs");
    }
}]]></source>
            </subsection>
        </section>

        <section name="Extracting text">
            <p>
                When you need to extract text from a web page, think of it as a two-step process: find it, then extract it.
                Use HtmlUnit's search methods (like getElementById(), XPath, or CSS selectors) to find the specific element
                containing the text you want. Then simply call the asNormalizedText() method on that element to get the text
                exactly as a user would see it in their browser.<br/>
                See following example:
            </p>
                <source><![CDATA[
@Test
public void extractTextToc() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("https://www.htmlunit.org/");

        final DomNode sponsoringDiv = page.querySelector("#bodyColumn > section:nth-child(1) > div:nth-child(2)");

        // A normalized textual representation of this element that represents
        // what would be visible to the user if this page was shown in a web browser.
        // Whitespace is normalized like in the browser and block tags are separated by '\n'.
        final String content = sponsoringDiv.asNormalizedText();
    }
}]]></source>

            <subsection name="Extracting the whole page content">
                <p>
                    If you want to extract all text from an entire page without targeting specific elements, you can call asNormalizedText() 
                    directly on the body element. This is useful for getting a quick overview of all visible content or for full-text indexing.<br/>
                    Here's a simple example that loads a page and extracts all its text:
                </p>
                <source><![CDATA[
@Test
public void extractTextFromBody() throws Exception {
    try (WebClient webClient = new WebClient()) {
        final HtmlPage page = webClient.getPage("https://www.htmlunit.org/");

        final HtmlBody body = page.getBody();

        // A normalized textual representation of this element that represents
        // what would be visible to the user if this page was shown in a web browser.
        // Whitespace is normalized like in the browser and block tags are separated by '\n'.
        final String bodyContent = body.asNormalizedText();
    }
}]]></source>
            </subsection>
        </section>
    </body>
</document>
