"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchPageCommand = exports.queuePageCommand = exports.fetchPageEvents = exports.emitPageEvent = void 0;
function emitPageEvent(event) {
    if (!window.__pageEventQueue) {
        window.__pageEventQueue = [];
    }
    window.__pageEventQueue.push(event);
    if (window.__pageEventCallback) {
        window.__pageEventCallback();
        delete window.__pageEventCallback;
    }
}
exports.emitPageEvent = emitPageEvent;
/**
 * Drain event queue on `client` side.
 *
 * To be called by `driver` remotely using `WebDrirver.executeAsyncScript`.
 * Runs in `client` scope.
 *
 * Used by `fetchPageEvents`.
 *
 * @params done LAST PARAMETER callback to be called to return response to `driver`
 */
function drainQueueClientWebDriver() {
    // `WebDriver.executeAsyncScript` will pass `done` as very last argument. For safety, ensure
    // that really use last arg.
    var done = arguments[arguments.length - 1];
    function tryDrainQueue() {
        var q = window.__pageEventQueue || [];
        if (q.length === 0) {
            window.__pageEventCallback = tryDrainQueue;
            return;
        }
        window.__pageEventCallback = null;
        window.__pageEventQueue = [];
        var encodedResponseRemote = JSON.stringify(q);
        done(encodedResponseRemote);
    }
    tryDrainQueue();
}
function fetchPageEvents(driver) {
    return __awaiter(this, void 0, void 0, function () {
        var ensodedResponseLocal, parsed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, driver.executeAsyncScript(drainQueueClientWebDriver)];
                case 1:
                    ensodedResponseLocal = _a.sent();
                    parsed = JSON.parse(ensodedResponseLocal);
                    return [2 /*return*/, parsed];
            }
        });
    });
}
exports.fetchPageEvents = fetchPageEvents;
function execPageCommandWebDriver() {
    var done = arguments[arguments.length - 1];
    if (!window.__driverCommandQueue) {
        window.__driverCommandQueue = [];
    }
    window.__driverCommandQueue.push(arguments[0]);
    if (window.__driverCommandCallback) {
        window.__driverCommandCallback();
        window.__driverCommandCallback = undefined;
    }
    done();
}
function queuePageCommand(driver, command) {
    return Promise.resolve(driver.executeAsyncScript(execPageCommandWebDriver, JSON.stringify(command)));
}
exports.queuePageCommand = queuePageCommand;
function fetchPageCommand() {
    return new Promise(function (resolve) {
        function tryShiftCommand() {
            if (!window.__driverCommandQueue || window.__driverCommandQueue.length === 0) {
                window.__driverCommandCallback = tryShiftCommand;
                return;
            }
            var command = window.__driverCommandQueue.shift();
            resolve(JSON.parse(command));
        }
        tryShiftCommand();
    });
}
exports.fetchPageCommand = fetchPageCommand;
