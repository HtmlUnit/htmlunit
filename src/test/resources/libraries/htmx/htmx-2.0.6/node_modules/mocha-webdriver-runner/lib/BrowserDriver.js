"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = exports.initializeMochaWebDriverClient = exports.delayMochaRun = exports.addMochaSource = exports.queryStringRunnerOptions = void 0;
var MochaRemoteReporter_1 = require("./MochaRemoteReporter");
var RemoteCommon_1 = require("./RemoteCommon");
var qs = require("qs");
/**
 * Adds mocha instance which will send test events, when ran.
 *  - use [[MochaWebdriverReporter]] to gather events
 *  - sends events to [[runRemoteMochaTest]]
 *
 * Note, default `Mocha` instance i.e `(global|window|self).mocha` is added by default, so
 * there is no reason to use this funciton manually, see [[initializeMochaWebDriverClient]].
 *
 * May be used both in "main" thread or in web worker thread. When executed in worker, it's
 * expected that worker instance in main thread is also registered for forwarding using
 * [[addWorkerSource]].
 */
function addMochaSource(mocha) {
    RemoteCommon_1.installGlobalErrorHandlers();
    mocha.reporter(MochaRemoteReporter_1.MochaRemoteReporter);
    mocha.globals(["__pageEventQueue", "__pageEventCallback", "__driverCommandCallback", "__driverCommandQueue"]);
    if (exports.queryStringRunnerOptions !== undefined) {
        RemoteCommon_1.applyMochaOptions(mocha, exports.queryStringRunnerOptions);
    }
    else {
        delayMochaRun(mocha);
    }
}
exports.addMochaSource = addMochaSource;
function delayMochaRun(mocha) {
    //
    // HACK NOTE:
    //
    // Initialize mocha timeout with rubbish, so we can detect not-customized timeouts later.
    // All tests, hook & suites with timeout() == MAGIC_TIMEOUT have it overriden later in
    // `applyMochaOptions` when actual timeout value is received from driver.
    //
    mocha.timeout(RemoteCommon_1.MAGIC_TIMEOUT);
    var originalMochaRun = mocha.run;
    mocha.run = function (fn) {
        RemoteCommon_1.runnerBackChannel.addEventListener("message", function (event) {
            var message = event.data;
            if (message && message.type === "mocha-run") {
                RemoteCommon_1.applyMochaOptions(mocha, message.mochaOptions || {});
                originalMochaRun.call(mocha, function (failures) {
                    RemoteCommon_1.runnerBackChannel.postMessage({
                        type: "mocha-finished"
                    });
                    if (fn) {
                        fn(failures);
                    }
                });
            }
        });
        RemoteCommon_1.runnerBackChannel.postMessage({
            type: "mocha-ready"
        });
        return undefined;
    };
}
exports.delayMochaRun = delayMochaRun;
/**
 * Initialize Mocha Webdriver Browser side.
 *
 * Checks `window.location.search` for specific `RemoteRunnerOptions` and if
 * `useMochaWebDriverRunner` flag is detected applies them to default `mocha` instance.
 */
function initializeMochaWebDriverClient() {
    if (typeof window !== "undefined") {
        var queryString = window.location.search;
        if (!queryString) {
            return;
        }
        var parsed = qs.parse(queryString.substr(1));
        if (!parsed.useMochaWebDriverRunner) {
            return;
        }
        var mochaOptions = {};
        if (typeof parsed.timeout === "string") {
            mochaOptions.timeout = parseInt(parsed.timeout, 10);
        }
        if (typeof parsed.grep === "string") {
            mochaOptions.grep = parsed.grep;
        }
        if (typeof parsed.checkLeaks === "string") {
            mochaOptions.checkLeaks = parsed.checkLeaks !== "false";
        }
        if (typeof parsed.globals === "string") {
            mochaOptions.globals = String(parsed.globals)
                .split(",")
                .filter(function (s) { return s.length > 0; });
        }
        if (typeof parsed.captureConsoleLog === "string") {
            mochaOptions.captureConsoleLog = parsed.captureConsoleLog !== "false";
        }
        if (typeof parsed.captureConsoleLog === "string") {
            mochaOptions.captureConsoleLog = parsed.captureConsoleLog !== "";
        }
        if (typeof parsed.globalsToSave === "string") {
            mochaOptions.globalsToSave = String(parsed.globalsToSave)
                .split(",")
                .filter(function (s) { return s.length > 0; });
        }
        exports.queryStringRunnerOptions = mochaOptions;
    }
    if (typeof mocha !== "undefined") {
        addMochaSource(mocha);
    }
}
exports.initializeMochaWebDriverClient = initializeMochaWebDriverClient;
/**
 * @deprecated use [[addMochaSource]]
 */
exports.install = addMochaSource;
