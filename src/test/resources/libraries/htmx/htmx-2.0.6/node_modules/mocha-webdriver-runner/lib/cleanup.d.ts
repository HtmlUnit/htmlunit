export interface Disposable {
    dispose(): Promise<void> | void;
}
export interface Closeable {
    close(): Promise<void> | void;
}
export interface Destroyable {
    destroy(): Promise<void> | void;
}
export declare type CleanableResource = Disposable | Closeable | Destroyable;
export declare type CleanupFunction = () => void | Promise<void>;
export interface Cleanup {
    (cleanupFunction: CleanupFunction): void;
    <T extends CleanableResource>(resource: T): T;
}
export declare function safeCallbackToPromise<T>(f: () => T | Promise<T>): Promise<T>;
export declare function withCleanup<T>(f: (cleanup: Cleanup) => T | Promise<T>): Promise<T>;
export declare type SyncCleaner = () => void | Promise<void>;
export declare type SyncCleanup = (cleaner: SyncCleaner) => void;
export declare function withCleanupSync<T>(f: (cleanup: SyncCleanup) => T): T;
