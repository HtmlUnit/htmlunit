"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagePortBase = void 0;
var events_1 = require("events");
var MessagePortBase = /** @class */ (function () {
    function MessagePortBase() {
        this.emitter = new events_1.EventEmitter();
        this.started = false;
    }
    // MessagePort interface
    MessagePortBase.prototype.start = function () {
        this.started = true;
        this.receiveRemoteEvents();
    };
    MessagePortBase.prototype.close = function () {
        this.started = false;
    };
    Object.defineProperty(MessagePortBase.prototype, "onmessage", {
        set: function (listener) {
            this.addEventListener("message", listener);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MessagePortBase.prototype, "onmessageerror", {
        set: function (listener) {
            this.addEventListener("error", listener);
        },
        enumerable: false,
        configurable: true
    });
    MessagePortBase.prototype.addEventListener = function (type, listener) {
        this.emitter.addListener(type, listener);
        if (!this.started) {
            this.start();
        }
    };
    MessagePortBase.prototype.removeEventListener = function (type, listener) {
        this.emitter.removeListener(type, listener);
        if (this.emitter.listenerCount("message") === 0 || this.emitter.listenerCount("error") === 0) {
            this.close();
        }
    };
    MessagePortBase.prototype.dispatchEvent = function (event) {
        this.emitter.emit(event.type, event);
        return true;
    };
    MessagePortBase.prototype.receiveRemoteEvents = function () {
        var _this = this;
        if (!this.started) {
            return;
        }
        this.doReceiveRemoteEvents().then(function () {
            _this.receiveRemoteEvents();
        });
    };
    return MessagePortBase;
}());
exports.MessagePortBase = MessagePortBase;
