"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runMochaWebDriverTest = exports.withWebDriver = void 0;
var selenium_webdriver_1 = require("selenium-webdriver");
var WebDriverMessagePort_1 = require("./WebDriverMessagePort");
var MochaRemoteRunner_1 = require("./MochaRemoteRunner");
var querystring = require("querystring");
function withWebDriver(capabilities, test) {
    return __awaiter(this, void 0, void 0, function () {
        var theDriver;
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, Promise.resolve(new selenium_webdriver_1.Builder()
                    .withCapabilities(capabilities)
                    .build()
                    .then(function (driver) { return __awaiter(_this, void 0, void 0, function () {
                    var result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                theDriver = driver;
                                return [4 /*yield*/, test(driver)];
                            case 1:
                                result = _a.sent();
                                return [4 /*yield*/, driver.quit()];
                            case 2:
                                _a.sent();
                                theDriver = undefined;
                                return [2 /*return*/, result];
                        }
                    });
                }); })).catch(function (error) { return __awaiter(_this, void 0, void 0, function () {
                    var error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(theDriver !== undefined)) return [3 /*break*/, 4];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, theDriver.quit()];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_1 = _a.sent();
                                console.log("withWebDriver: error while quiting WebDriver session", error_1);
                                return [3 /*break*/, 4];
                            case 4: throw error;
                        }
                    });
                }); })];
        });
    });
}
exports.withWebDriver = withWebDriver;
/**
 * Run Mocha tests using `webDriver` (instance or `Capabilities` used to build instance).
 */
function runMochaWebDriverTest(webDriver, url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var passOptionsWithQueryString, queryStringParams, delimiter, messagePort;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(webDriver instanceof selenium_webdriver_1.WebDriver)) {
                        return [2 /*return*/, withWebDriver(webDriver, function (driver) {
                                return runMochaWebDriverTest(driver, url, options);
                            })];
                    }
                    options = options || {};
                    if (options.captureConsoleLog === undefined) {
                        options.captureConsoleLog = true;
                    }
                    passOptionsWithQueryString = true;
                    if (passOptionsWithQueryString) {
                        queryStringParams = {
                            useMochaWebDriverRunner: 1
                        };
                        if (options.captureConsoleLog !== undefined) {
                            queryStringParams.captureConsoleLog = options.captureConsoleLog !== false;
                        }
                        if (options.delay !== undefined) {
                            queryStringParams.delay = options.delay;
                        }
                        if (options.timeout !== undefined) {
                            queryStringParams.timeout = options.timeout;
                        }
                        if (options.globals !== undefined) {
                            queryStringParams.globals = options.globals.join(",");
                        }
                        if (options.checkLeaks !== undefined) {
                            queryStringParams.checkLeaks = options.checkLeaks;
                        }
                        if (options.grep !== undefined) {
                            queryStringParams.grep = options.grep;
                        }
                        if (options.globalsToSave !== undefined && options.globalsToSave.length > 0) {
                            queryStringParams.globalsToSave = options.globalsToSave.join(",");
                        }
                        delimiter = url.indexOf("?") === -1 ? "?" : "&";
                        url = url + delimiter + querystring.stringify(queryStringParams);
                    }
                    return [4 /*yield*/, webDriver.get(url)];
                case 1:
                    _a.sent();
                    messagePort = new WebDriverMessagePort_1.WebDriverMessagePort(webDriver);
                    return [2 /*return*/, MochaRemoteRunner_1.runRemoteMochaTest(messagePort, __assign(__assign({}, options), { clientWaitsForOptions: !passOptionsWithQueryString }))];
            }
        });
    });
}
exports.runMochaWebDriverTest = runMochaWebDriverTest;
