"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaRemoteReporter = void 0;
var RemoteCommon_1 = require("./RemoteCommon");
var suite_synchronizer_1 = require("./suite-synchronizer");
var treesync_1 = require("@zbigg/treesync");
var myGlobalThis = typeof globalThis !== "undefined" ? globalThis : (new Function("return this"))();
/**
 * This reporter sends all events received from `Mocha.Runner` to
 * [[runRemoteMochaTest]] through [[runnerBackChannel]].
 *
 * It sends messages of type `mocha-runner-event`, with event contens serialized using
 * `suite-synchronizer`.
 */
var MochaRemoteReporter = /** @class */ (function () {
    function MochaRemoteReporter(runner) {
        var passes = 0;
        var failures = 0;
        var synchronizer = suite_synchronizer_1.createMochaStateSynchronizer();
        function forwardRunnerEvent(event) {
            RemoteCommon_1.runnerBackChannel.postMessage({
                type: "mocha-runner-event",
                event: synchronizer.buildPacket(event)
            });
        }
        // TODO: hook events
        runner.on("start", function () {
            forwardRunnerEvent({
                type: "start",
                suite: runner.suite
            });
        });
        runner.on("suite", function (suite) {
            forwardRunnerEvent({
                type: "suite",
                suite: suite
            });
        });
        runner.on("suite end", function (suite) {
            forwardRunnerEvent({
                type: "suite end",
                suite: suite
            });
        });
        runner.on("test", function (test) {
            forwardRunnerEvent({
                type: "test",
                test: test
            });
        });
        runner.on("test end", function (test) {
            forwardRunnerEvent({
                type: "test end",
                test: test
            });
        });
        runner.on("pending", function (test) {
            forwardRunnerEvent({
                type: "pending",
                test: test
            });
        });
        runner.on("pass", function (test) {
            passes++;
            forwardRunnerEvent({
                type: "pass",
                test: test
            });
        });
        runner.on("fail", function (test, err) {
            failures++;
            forwardRunnerEvent({
                type: "fail",
                test: test,
                err: err
            });
        });
        runner.on("end", function () {
            var e_1, _a;
            if (RemoteCommon_1.currentOptions.globalsToSave !== undefined) {
                try {
                    for (var _b = __values(RemoteCommon_1.currentOptions.globalsToSave), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var globalName = _c.value;
                        var value = myGlobalThis[globalName];
                        RemoteCommon_1.runnerBackChannel.postMessage({
                            type: "var-dump",
                            name: globalName,
                            value: treesync_1.buildMessage(value)
                        });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            forwardRunnerEvent({
                type: "end",
                passes: passes,
                failures: failures,
                stats: runner.stats
            });
        });
    }
    return MochaRemoteReporter;
}());
exports.MochaRemoteReporter = MochaRemoteReporter;
