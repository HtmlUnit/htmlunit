"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebDriverMessagePort = void 0;
var page_event_queue_1 = require("./page-event-queue");
var MessagePortBase_1 = require("./MessagePortBase");
/**
 * Node side of Worker-like channel between node and browser context.
 */
var WebDriverMessagePort = /** @class */ (function (_super) {
    __extends(WebDriverMessagePort, _super);
    function WebDriverMessagePort(driver) {
        var _this = _super.call(this) || this;
        _this.driver = driver;
        _this.commandRunning = false;
        _this.queuedCommands = [];
        return _this;
    }
    WebDriverMessagePort.prototype.postMessage = function (message) {
        var _this = this;
        this.queueCommand(function () {
            return page_event_queue_1.queuePageCommand(_this.driver, {
                type: "message",
                data: message
            });
        });
    };
    WebDriverMessagePort.prototype.doReceiveRemoteEvents = function () {
        var _this = this;
        return this.queueCommand(function () {
            return page_event_queue_1.fetchPageEvents(_this.driver).then(function (events) {
                events.forEach(function (event) {
                    _this.dispatchEvent(event);
                });
            });
        });
    };
    WebDriverMessagePort.prototype.tryProcessQueue = function () {
        var _this = this;
        if (this.commandRunning || this.queuedCommands.length === 0) {
            return;
        }
        var command = this.queuedCommands.shift();
        this.commandRunning = true;
        command
            .fun()
            .then(function (result) {
            command.resolve(result);
            _this.commandRunning = false;
        })
            .catch(function (error) {
            command.reject(error);
        })
            .then(function () {
            _this.tryProcessQueue();
        });
    };
    WebDriverMessagePort.prototype.queueCommand = function (fun) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.queuedCommands.push({
                fun: fun,
                resolve: resolve,
                reject: reject
            });
            process.nextTick(function () {
                _this.tryProcessQueue();
            });
        });
    };
    return WebDriverMessagePort;
}(MessagePortBase_1.MessagePortBase));
exports.WebDriverMessagePort = WebDriverMessagePort;
