import * as mocha from "mocha";
import { SerializationMessage, SyncPayload } from "@zbigg/treesync";
export interface RemoteRunnerOptions {
    /**
     * Delay test execution (TBD)!
     */
    delay?: boolean;
    /**
     * Set test-case timeout in milliseconds
     */
    timeout?: number;
    /**
     * Check for global variable leaks.
     */
    checkLeaks?: boolean;
    /**
     * List of allowed global variables.
     */
    globals?: string[];
    /**
     * Run only tests than name matches `grep` expression.
     */
    grep?: string | RegExp;
    /**
     * Capture `console.log` (and other) messages executed in browser context.
     *
     * Defaults to `true`.
     */
    captureConsoleLog?: boolean;
    /**
     * Global objects captured after test.
     */
    globalsToSave?: string[];
}
/**
 * Sent from driver to worker in automatic mode to boostrap worker i.e
 * - load essential scripts (mocha, mocha-webdriver-client)
 * - load actual test scripts
 *
 * It's expected that worker will respond with [[MochaReadyMessage]]
 */
export interface BootstrapWorkerMessage {
    type: "boostrap-worker";
    baseUrl: string;
    bootstrapScripts?: string[];
    tests: string[];
}
export interface MochaReadyMessage {
    type: "mocha-ready";
}
export interface MochaRunMessage {
    type: "mocha-run";
    mochaOptions?: RemoteRunnerOptions;
}
export interface MochaFinishedMessage {
    type: "mocha-finished";
}
export interface LogMessage {
    type: "log";
    level: string;
    args: SerializationMessage;
}
export interface VarDumpMessage {
    type: "var-dump";
    name: string;
    value: SerializationMessage;
}
export interface AbortedMessage {
    type: "err-aborted";
    message: string;
    error: SerializationMessage;
}
export interface UnhandledExceptionMessage {
    type: "err-unhandled-exception";
    message: string;
    error: SerializationMessage;
}
/**
 * Simplistic interface of Mocha event sent
 *
 * TODO: implement proper subtypes
 */
export interface MochaRunnerEvent {
    type: string;
    test?: mocha.Test;
    suite?: mocha.Suite;
    message?: string;
    err?: Error;
    failures?: number;
    passes?: number;
    stats?: any;
}
export interface MochaRunnerEventMessage {
    type: "mocha-runner-event";
    /**
     * [[MochaRunnerEvent]] serialized using `suite-synchronizer`.
     */
    event: SyncPayload;
}
export declare type RemoteRunnerMessage = MochaReadyMessage | MochaRunMessage | MochaFinishedMessage | MochaRunnerEventMessage | UnhandledExceptionMessage | AbortedMessage | LogMessage | VarDumpMessage | BootstrapWorkerMessage;
