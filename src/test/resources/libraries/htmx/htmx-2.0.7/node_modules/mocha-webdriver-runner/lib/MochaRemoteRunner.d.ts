/// <reference types="mocha" />
import { RemoteRunnerOptions } from "./RemoteRunnerProtocol";
/**
 * Mocha Webdriver Runner options.
 */
export interface Options extends RemoteRunnerOptions {
    /**
     * Name or constructor of reporter.
     *
     * When name is string, it must be one of
     * * builtin mocha reporters: `spec`, `xunit`, `json` ...
     * * name of CommonJS module, which default export should be constructor of
     *   compliant `Mocha.Reporter` instance
     */
    reporter?: string | (new (runner: Mocha.Runner) => Mocha.reporters.Base);
    /**
     * Reporter options object.
     *
     * Each reporter has custom options, for example
     *  * `xunit` reporter supports
     *      * `output: string` - a file name to which report shoult be generated
     *      * `suiteName: string` - root suite name which defaults to `Mocha Tests`
     */
    reporterOptions?: any;
    /**
     * If true, mocha in clients waits for `mocha-run` message with options.
     *
     * If options are passed with other channel (like query-string), mocha can start immediately
     * and this flag can be set to `false`.
     *
     * @default `true`
     */
    clientWaitsForOptions?: boolean;
}
export interface RemoteTestRunResult {
    success: boolean;
    dumpedGlobals: {
        [name: string]: any;
    };
}
export declare function runRemoteMochaTest(messagePort: MessagePort, options: Options): Promise<RemoteTestRunResult>;
