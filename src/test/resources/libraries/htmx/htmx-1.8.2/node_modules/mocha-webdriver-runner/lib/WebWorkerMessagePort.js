"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebWorkerMessagePort = void 0;
var MessagePortBase_1 = require("./MessagePortBase");
/**
 * WebWorker side of Worker-like channel between browser context.
 *
 * Sends messages using [[self.postMessage]].
 */
var WebWorkerMessagePort = /** @class */ (function (_super) {
    __extends(WebWorkerMessagePort, _super);
    function WebWorkerMessagePort() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Receives `message` from `worker.postMessage` call.
         *
         * Pessage payload is in `message.data` field.
         */
        _this.onMessage = function (event) {
            _this.dispatchEvent(event);
        };
        return _this;
    }
    WebWorkerMessagePort.prototype.start = function () {
        self.addEventListener("message", this.onMessage);
    };
    WebWorkerMessagePort.prototype.close = function () {
        self.removeEventListener("message", this.onMessage);
    };
    WebWorkerMessagePort.prototype.postMessage = function (message) {
        self.postMessage(message);
    };
    WebWorkerMessagePort.prototype.doReceiveRemoteEvents = function () {
        throw new Error("Method not implemented.");
    };
    return WebWorkerMessagePort;
}(MessagePortBase_1.MessagePortBase));
exports.WebWorkerMessagePort = WebWorkerMessagePort;
