{"version":3,"file":"chart.js","sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(\n        this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId\n      )] = true;\n    }\n    return Object.keys(axis);\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<TimeUnit | 'datetime', string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: string): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: string): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number | boolean): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options?: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<TimeUnit | 'datetime', string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase as {\n    new (options?: AnyObject): DateAdapter;\n    override<T extends AnyObject = AnyObject>(\n      members: Partial<Omit<DateAdapter<T>, 'options'>>\n    ): void;\n  }\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea, isNullOrUndef} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {vScale} = controller._cachedMeta;\n        const {_parsed} = metaset;\n\n        const distanceToDefinedLo = (_parsed\n          .slice(0, result.lo + 1)\n          .reverse()\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = (_parsed\n          .slice(result.hi)\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea, _isDomSupported, retinaScale, getDatasetClipArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    // @ts-expect-error\n    const clip = getDatasetClipArea(this, meta);\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n\n    meta.controller.draw();\n\n    if (clip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _angleDiff, _normalizeAngle, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\nfunction clipSelf(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, x, y, outerRadius, innerRadius, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.clip('evenodd');\n}\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset, borderRadius} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n    selfJoin: false,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of a segment -> need to add another point before this,\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of a segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea, getDatasetClipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {chart, index, line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis, clip});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale, clip} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {line, target, color: above, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {line, target, color: below, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {line, target, color: fillColor, scale, property, clip});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction clipHorizontal(ctx, target, clipX) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale, clip} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n\n    ctx.beginPath();\n\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getAxisCount","_getAxis","getFirstScaleIdForIndexAxis","indexScaleId","firstScaleAxisId","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","axisCount","axisID","axisNumber","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getDatasetClipArea","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipSelf","borderJoinStyle","outerAngleClip","_normalizeAngle","innerAngleClip","clipWidth","closePath","rect","clipArc","pixelMargin","angleMargin","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","inner","lineJoin","selfJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","fillColor","clipVertical","clipHorizontal","clipY","lineLoop","clipX","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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"}